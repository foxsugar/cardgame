/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.code.server.rpc.idl;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-04-19")
public class Rebate implements org.apache.thrift.TBase<Rebate, Rebate._Fields>, java.io.Serializable, Cloneable, Comparable<Rebate> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Rebate");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField REFEREE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("refereeId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField REBATE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("rebateNum", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField IS_HAS_REFEREE_FIELD_DESC = new org.apache.thrift.protocol.TField("isHasReferee", org.apache.thrift.protocol.TType.BOOL, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RebateStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RebateTupleSchemeFactory();

  private long id; // required
  private long userId; // required
  private int refereeId; // required
  private double rebateNum; // required
  private long time; // required
  private boolean isHasReferee; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    USER_ID((short)2, "userId"),
    REFEREE_ID((short)3, "refereeId"),
    REBATE_NUM((short)4, "rebateNum"),
    TIME((short)5, "time"),
    IS_HAS_REFEREE((short)6, "isHasReferee");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // USER_ID
          return USER_ID;
        case 3: // REFEREE_ID
          return REFEREE_ID;
        case 4: // REBATE_NUM
          return REBATE_NUM;
        case 5: // TIME
          return TIME;
        case 6: // IS_HAS_REFEREE
          return IS_HAS_REFEREE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __USERID_ISSET_ID = 1;
  private static final int __REFEREEID_ISSET_ID = 2;
  private static final int __REBATENUM_ISSET_ID = 3;
  private static final int __TIME_ISSET_ID = 4;
  private static final int __ISHASREFEREE_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REFEREE_ID, new org.apache.thrift.meta_data.FieldMetaData("refereeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REBATE_NUM, new org.apache.thrift.meta_data.FieldMetaData("rebateNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.IS_HAS_REFEREE, new org.apache.thrift.meta_data.FieldMetaData("isHasReferee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Rebate.class, metaDataMap);
  }

  public Rebate() {
  }

  public Rebate(
    long id,
    long userId,
    int refereeId,
    double rebateNum,
    long time,
    boolean isHasReferee)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.userId = userId;
    setUserIdIsSet(true);
    this.refereeId = refereeId;
    setRefereeIdIsSet(true);
    this.rebateNum = rebateNum;
    setRebateNumIsSet(true);
    this.time = time;
    setTimeIsSet(true);
    this.isHasReferee = isHasReferee;
    setIsHasRefereeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Rebate(Rebate other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.userId = other.userId;
    this.refereeId = other.refereeId;
    this.rebateNum = other.rebateNum;
    this.time = other.time;
    this.isHasReferee = other.isHasReferee;
  }

  public Rebate deepCopy() {
    return new Rebate(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setUserIdIsSet(false);
    this.userId = 0;
    setRefereeIdIsSet(false);
    this.refereeId = 0;
    setRebateNumIsSet(false);
    this.rebateNum = 0.0;
    setTimeIsSet(false);
    this.time = 0;
    setIsHasRefereeIsSet(false);
    this.isHasReferee = false;
  }

  public long getId() {
    return this.id;
  }

  public Rebate setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public long getUserId() {
    return this.userId;
  }

  public Rebate setUserId(long userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public int getRefereeId() {
    return this.refereeId;
  }

  public Rebate setRefereeId(int refereeId) {
    this.refereeId = refereeId;
    setRefereeIdIsSet(true);
    return this;
  }

  public void unsetRefereeId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REFEREEID_ISSET_ID);
  }

  /** Returns true if field refereeId is set (has been assigned a value) and false otherwise */
  public boolean isSetRefereeId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REFEREEID_ISSET_ID);
  }

  public void setRefereeIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REFEREEID_ISSET_ID, value);
  }

  public double getRebateNum() {
    return this.rebateNum;
  }

  public Rebate setRebateNum(double rebateNum) {
    this.rebateNum = rebateNum;
    setRebateNumIsSet(true);
    return this;
  }

  public void unsetRebateNum() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REBATENUM_ISSET_ID);
  }

  /** Returns true if field rebateNum is set (has been assigned a value) and false otherwise */
  public boolean isSetRebateNum() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REBATENUM_ISSET_ID);
  }

  public void setRebateNumIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REBATENUM_ISSET_ID, value);
  }

  public long getTime() {
    return this.time;
  }

  public Rebate setTime(long time) {
    this.time = time;
    setTimeIsSet(true);
    return this;
  }

  public void unsetTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIME_ISSET_ID);
  }

  /** Returns true if field time is set (has been assigned a value) and false otherwise */
  public boolean isSetTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIME_ISSET_ID);
  }

  public void setTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIME_ISSET_ID, value);
  }

  public boolean isIsHasReferee() {
    return this.isHasReferee;
  }

  public Rebate setIsHasReferee(boolean isHasReferee) {
    this.isHasReferee = isHasReferee;
    setIsHasRefereeIsSet(true);
    return this;
  }

  public void unsetIsHasReferee() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISHASREFEREE_ISSET_ID);
  }

  /** Returns true if field isHasReferee is set (has been assigned a value) and false otherwise */
  public boolean isSetIsHasReferee() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISHASREFEREE_ISSET_ID);
  }

  public void setIsHasRefereeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISHASREFEREE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Long)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((java.lang.Long)value);
      }
      break;

    case REFEREE_ID:
      if (value == null) {
        unsetRefereeId();
      } else {
        setRefereeId((java.lang.Integer)value);
      }
      break;

    case REBATE_NUM:
      if (value == null) {
        unsetRebateNum();
      } else {
        setRebateNum((java.lang.Double)value);
      }
      break;

    case TIME:
      if (value == null) {
        unsetTime();
      } else {
        setTime((java.lang.Long)value);
      }
      break;

    case IS_HAS_REFEREE:
      if (value == null) {
        unsetIsHasReferee();
      } else {
        setIsHasReferee((java.lang.Boolean)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case USER_ID:
      return getUserId();

    case REFEREE_ID:
      return getRefereeId();

    case REBATE_NUM:
      return getRebateNum();

    case TIME:
      return getTime();

    case IS_HAS_REFEREE:
      return isIsHasReferee();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case USER_ID:
      return isSetUserId();
    case REFEREE_ID:
      return isSetRefereeId();
    case REBATE_NUM:
      return isSetRebateNum();
    case TIME:
      return isSetTime();
    case IS_HAS_REFEREE:
      return isSetIsHasReferee();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Rebate)
      return this.equals((Rebate)that);
    return false;
  }

  public boolean equals(Rebate that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_refereeId = true;
    boolean that_present_refereeId = true;
    if (this_present_refereeId || that_present_refereeId) {
      if (!(this_present_refereeId && that_present_refereeId))
        return false;
      if (this.refereeId != that.refereeId)
        return false;
    }

    boolean this_present_rebateNum = true;
    boolean that_present_rebateNum = true;
    if (this_present_rebateNum || that_present_rebateNum) {
      if (!(this_present_rebateNum && that_present_rebateNum))
        return false;
      if (this.rebateNum != that.rebateNum)
        return false;
    }

    boolean this_present_time = true;
    boolean that_present_time = true;
    if (this_present_time || that_present_time) {
      if (!(this_present_time && that_present_time))
        return false;
      if (this.time != that.time)
        return false;
    }

    boolean this_present_isHasReferee = true;
    boolean that_present_isHasReferee = true;
    if (this_present_isHasReferee || that_present_isHasReferee) {
      if (!(this_present_isHasReferee && that_present_isHasReferee))
        return false;
      if (this.isHasReferee != that.isHasReferee)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(id);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(userId);

    hashCode = hashCode * 8191 + refereeId;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(rebateNum);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(time);

    hashCode = hashCode * 8191 + ((isHasReferee) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(Rebate other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRefereeId()).compareTo(other.isSetRefereeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefereeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refereeId, other.refereeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRebateNum()).compareTo(other.isSetRebateNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRebateNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rebateNum, other.rebateNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTime()).compareTo(other.isSetTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, other.time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIsHasReferee()).compareTo(other.isSetIsHasReferee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsHasReferee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isHasReferee, other.isHasReferee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Rebate(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("refereeId:");
    sb.append(this.refereeId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rebateNum:");
    sb.append(this.rebateNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("time:");
    sb.append(this.time);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isHasReferee:");
    sb.append(this.isHasReferee);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RebateStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RebateStandardScheme getScheme() {
      return new RebateStandardScheme();
    }
  }

  private static class RebateStandardScheme extends org.apache.thrift.scheme.StandardScheme<Rebate> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Rebate struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.userId = iprot.readI64();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REFEREE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.refereeId = iprot.readI32();
              struct.setRefereeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REBATE_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.rebateNum = iprot.readDouble();
              struct.setRebateNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.time = iprot.readI64();
              struct.setTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IS_HAS_REFEREE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isHasReferee = iprot.readBool();
              struct.setIsHasRefereeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Rebate struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI64(struct.userId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REFEREE_ID_FIELD_DESC);
      oprot.writeI32(struct.refereeId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REBATE_NUM_FIELD_DESC);
      oprot.writeDouble(struct.rebateNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TIME_FIELD_DESC);
      oprot.writeI64(struct.time);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_HAS_REFEREE_FIELD_DESC);
      oprot.writeBool(struct.isHasReferee);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RebateTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RebateTupleScheme getScheme() {
      return new RebateTupleScheme();
    }
  }

  private static class RebateTupleScheme extends org.apache.thrift.scheme.TupleScheme<Rebate> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Rebate struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetUserId()) {
        optionals.set(1);
      }
      if (struct.isSetRefereeId()) {
        optionals.set(2);
      }
      if (struct.isSetRebateNum()) {
        optionals.set(3);
      }
      if (struct.isSetTime()) {
        optionals.set(4);
      }
      if (struct.isSetIsHasReferee()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetUserId()) {
        oprot.writeI64(struct.userId);
      }
      if (struct.isSetRefereeId()) {
        oprot.writeI32(struct.refereeId);
      }
      if (struct.isSetRebateNum()) {
        oprot.writeDouble(struct.rebateNum);
      }
      if (struct.isSetTime()) {
        oprot.writeI64(struct.time);
      }
      if (struct.isSetIsHasReferee()) {
        oprot.writeBool(struct.isHasReferee);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Rebate struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.userId = iprot.readI64();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.refereeId = iprot.readI32();
        struct.setRefereeIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.rebateNum = iprot.readDouble();
        struct.setRebateNumIsSet(true);
      }
      if (incoming.get(4)) {
        struct.time = iprot.readI64();
        struct.setTimeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.isHasReferee = iprot.readBool();
        struct.setIsHasRefereeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

